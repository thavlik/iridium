#pragma once

#include <vector>
#include "TriggerAction.h"
#include "Setter.h"

namespace Ir
{
	class EventObject;

	//////////////////////////////////////////////////////////////////////////
	///
	/// TriggerCondition
	///
	//////////////////////////////////////////////////////////////////////////
	class TriggerCondition {
	public:
	private:
	};

	//////////////////////////////////////////////////////////////////////////
	///
	/// TriggerBase
	///
	//////////////////////////////////////////////////////////////////////////
	class TriggerBase {
	public:
		virtual ~TriggerBase() { }

	protected:
		TriggerBase() { }

	private:
	};

	//////////////////////////////////////////////////////////////////////////
	///
	/// Trigger
	///
	//////////////////////////////////////////////////////////////////////////
	class Trigger : public TriggerBase {
	public:
	private:
		TriggerCondition _condition;
		std::vector<Setter*> _setters;
		std::vector<TriggerAction*> _enterActions, _leaveActions;
	};

	//////////////////////////////////////////////////////////////////////////
	///
	/// MultiTrigger
	///
	//////////////////////////////////////////////////////////////////////////
	class MultiTrigger : public TriggerBase {
	public:
	private:
		std::vector<TriggerCondition> _conditions;
		std::vector<Setter*> _setters;
		std::vector<TriggerAction*> _enterActions, _leaveActions;
	};

	//////////////////////////////////////////////////////////////////////////
	///
	/// EventTrigger
	///
	//////////////////////////////////////////////////////////////////////////
	class EventTrigger : public TriggerBase {
	public:
	private:
		std::vector<TriggerAction*> _actions;
	};
}